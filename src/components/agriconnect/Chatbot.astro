<section id="chatbot" class="relative py-16">
  <div aria-hidden="true" class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-40">
    <div class="blur-[106px] h-56 bg-gradient-to-br from-blue-400 via-purple-200 to-green-400"></div>
    <div class="blur-[106px] h-32 bg-gradient-to-r from-white via-green-400 to-blue-400"></div>
  </div>
  <div class="container mx-auto px-4 relative z-10">
    
    <div class="flex items-center justify-center mb-12">
      <img src="/images/agriconnect/chatbotArtboard 1.svg" alt="Chatbot Icon" class="w-12 h-12 mr-4">
      <h2 class="text-4xl font-bold text-center text-gray-800">AI-Powered Chatbot</h2>
    </div>
    <div class="flex flex-col md:flex-row items-center justify-between gap-12">
      <div class="w-full md:w-1/2 relative">
        <div class="relative w-full h-[650px] max-w-sm mx-auto chatbot-container">
          <img 
            src="/images/agriconnect/iphone-background.svg" 
            alt="iPhone Background" 
            class="w-full h-full object-contain absolute inset-0 scale-105"
          />
          <div class="absolute inset-0 chat-bubbles flex flex-col justify-center items-start px-10 py-16">
            <img 
              src="/images/agriconnect/chat1-1.svg" 
              alt="Chat Bubble 1" 
              class="w-full object-contain bubble bubble-1"
            />
            <img 
              src="/images/agriconnect/chat1-2.svg" 
              alt="Chat Bubble 2" 
              class="w-full object-contain bubble bubble-2 self-end "
            />
            <img 
              src="/images/agriconnect/chat1-3.svg" 
              alt="Chat Bubble 3" 
              class="w-full object-contain bubble bubble-3 "
            />
            <img 
              src="/images/agriconnect/chat1-4.svg" 
              alt="Chat Bubble 4" 
              class="w-full object-contain bubble bubble-4 self-end "
            />
            <div class="w-full flex items-start mt-1">
              <img 
                src="/images/agriconnect/chat1-5.svg" 
                alt="Chat Bubble 5" 
                class="w-1/5 object-contain bubble bubble-5"
              />
            </div>
          </div>
        </div>
      </div>
      <div class="w-full md:w-1/2 space-y-8">
        <h3 class="text-2xl font-semibold mb-6 text-gray-700">Key Features</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {[
            { icon: "üåç", title: "Multi-lingual", description: "Support in various languages" },
            { icon: "üéôÔ∏è", title: "Multi-modal", description: "Text, voice, and image interactions" },
            { icon: "üí¨", title: "Integrated", description: (
              <span>
                Works across messaging platforms: 
                <span class="whitespace-nowrap">
                  <img src="/images/telegram-logo.svg" alt="Telegram" class="inline-block w-4 h-4 mx-1" />
                  Telegram
                </span>,&nbsp;
                <span class="whitespace-nowrap">
                  <img src="/images/whatsapp-logo.svg" alt="WhatsApp" class="inline-block w-4 h-4 mx-1" />
                  WhatsApp
                </span>,&nbsp;
                <span class="whitespace-nowrap">
                  <img src="/images/line-logo.svg" alt="Line" class="inline-block w-4 h-4 mx-1" />
                  Line
                </span>, etc.
              </span>
            )},
            { icon: "üï∞Ô∏è", title: "Always Available", description: "24/7 support for farmers" },
          ].map((feature) => (
            <div class="bg-white p-6 rounded-lg shadow-md transition-all hover:shadow-lg">
              <div class="text-3xl mb-2">{feature.icon}</div>
              <h4 class="text-lg font-semibold mb-2 text-gray-800">{feature.title}</h4>
              <p class="text-gray-600">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .bubble {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s, transform 0.5s;
    max-width: 100%;
    height: auto;
  }

  .chatbot-container.animate .bubble-1 {
    animation: fadeIn 0.5s ease-out forwards, fadeOut 0.5s ease-in 14.5s forwards;
  }

  .chatbot-container.animate .bubble-2 {
    animation: fadeIn 0.5s ease-out 1s forwards, fadeOut 0.5s ease-in 14.5s forwards;
  }

  .chatbot-container.animate .bubble-3 {
    animation: fadeIn 0.5s ease-out 2s forwards, fadeOut 0.5s ease-in 14.5s forwards;
  }

  .chatbot-container.animate .bubble-4 {
    animation: fadeIn 0.5s ease-out 3s forwards, fadeOut 0.5s ease-in 14.5s forwards;
  }

  .chatbot-container.animate .bubble-5 {
    animation: fadeIn 0.5s ease-out 4s forwards, fadeOut 0.5s ease-in 14.5s forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes fadeOut {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(-20px); }
  }
</style>

<script>
  function animateChatbot() {
    const chatbotContainer = document.querySelector('.chatbot-container');
    if (chatbotContainer) {
      chatbotContainer.classList.add('animate');
      setTimeout(() => {
        chatbotContainer.classList.remove('animate');
        setTimeout(animateChatbot, 500); // Start the next animation cycle after a short delay
      }, 15000); // Total animation duration
    }
  }

  function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }

  function handleScroll() {
    const chatbotSection = document.getElementById('chatbot');
    if (chatbotSection && isElementInViewport(chatbotSection)) {
      animateChatbot();
      window.removeEventListener('scroll', handleScroll);
    }
  }

  // Use DOMContentLoaded event to ensure the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial state
  });

  const chatbot = document.querySelector('.chatbot');
  const bubbles = chatbot.querySelectorAll('.bubble');

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        chatbot.classList.add('in-view');
      } else {
        chatbot.classList.remove('in-view');
        bubbles.forEach((bubble) => {
          bubble.style.opacity = '0';
          bubble.style.transform = 'translateY(20px)';
        });
      }
    });
  }, { threshold: 0.5 });

  observer.observe(chatbot);
</script>